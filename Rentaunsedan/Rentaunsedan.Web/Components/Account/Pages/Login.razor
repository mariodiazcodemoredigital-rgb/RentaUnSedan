@page "/Account/Login"


@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Rentaunsedan.Data.Data

@inject UserManager<ApplicationUser> UserManager

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager




<PageTitle>Log in</PageTitle>

<div class="login-layout">
    <div class="login-box">
        <!-- Sección izquierda -->
        <div class="login-form-section">
            <StatusMessage Message="@errorMessage" />
            
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
          
                <DataAnnotationsValidator />
                <h2>Bienvenido</h2>                

                <InputText @bind-Value="Input.EmailOrUsername" class="form-control " placeholder="Correo o nombre de usuario" />
                <ValidationMessage For="() => Input.EmailOrUsername" class="validation-message" />

                <InputText type="password" @bind-Value="Input.Password" class="form-control " autocomplete="current-password" aria-required="true" placeholder="Contraseña" />
                <ValidationMessage For="() => Input.Password" class="validation-message" />

                @* <div class="checkbox mb-3">
                    <label>
                        <InputCheckbox @bind-Value="Input.RememberMe" /> Recuérdame
                    </label>
                </div> *@

                <button type="submit" class="btn btn-primary">Iniciar Sesión</button>

                @*  <p><a href="Account/ForgotPassword">¿Olvidaste tu contraseña?</a></p>
                <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Crear cuenta nueva</a></p> *@
            </EditForm>       
        </div>

        <!-- Sección derecha -->
        <div class="login-image-section">
            <img src="images/login-illustration.png" alt="Login Illustration" />
        </div>
    </div>

    <footer class="login-footer">
        © 2025 RentaUnSedan | Todos los derechos reservados
    </footer>
</div>

<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden; /* ✅ Evita scroll */
    }

    .login-layout {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #007bff;
        font-family: Arial, sans-serif;
        padding: 1rem;
    }

    .login-box {
        display: flex;
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        max-width: 850px;
        width: 90%;
    }

    .login-form-section {
        flex: 1;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

        .login-form-section h2 {
            text-align: center;
            margin-bottom: 1rem;
        }

        .login-form-section main {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .login-form-section .btn {
            width: 100%;
            padding: 0.75rem;
            border-radius: 25px;
            font-weight: bold;
        }

        .login-form-section .btn-primary {
            background: #007bff;
            border: none;
        }

            .login-form-section .btn-primary:hover {
                background: #0056b3;
            }

    .login-image-section {
        flex: 1;
        background: #f8f9fa;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
    }

        .login-image-section img {
            max-width: 80%;
        }

    .login-form-section input {
        width: 100%;
        /* padding: 0.75rem; */
        padding: 1.0rem 0rem 1.0rem 0rem; /* ✅ padding-left para separar el texto */
        text-indent: 0.8rem; /* ✅ mueve el texto hacia la derecha */
        font-size: 1.1rem; /* ✅ aumenta el tamaño de la letra */
        line-height: 1.2rem;
        margin-bottom: 1rem; /* ✅ espacio entre inputs */
        border: 1px solid #ddd;
        border-radius: 25px;
        outline: none;
    }

    .text-danger {
        color: #dc3545 !important; /* rojo Bootstrap */
    }

    .validation-message {
        display: block;
        color: #dc3545 !important;
        margin-bottom: 0.75rem;
        font-size: 0.95rem;
    }





    .login-form-section button {
        width: 100%;
        padding: 0.75rem;
        background: #007bff;
        border: none;
        border-radius: 25px;
        color: white;
        font-weight: bold;
        font-size: 1.1rem; /* ✅ aumenta el tamaño de la letra */
        cursor: pointer;
        transition: background 0.3s;
    }

        .login-form-section button:hover {
            background: #0056b3;
        }

    .login-footer {
        margin-top: 1rem;
        color: white;
        font-size: 0.85rem;
        text-align: center;
    }

    .custom-alert {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .custom-alert-content {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        width: 300px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    }

        .custom-alert-content h3 {
            margin-bottom: 0.5rem;
            color: #dc3545; /* Rojo como error */
        }

        .custom-alert-content button {
            margin-top: 1rem;
            background: #007bff;
            border: none;
            padding: 0.5rem 1rem;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

            .custom-alert-content button:hover {
                background: #0056b3;
            }

</style>

<script src="/js/librerias/sweetalert/sweetalert2.js"> </script>

@code {
    private string? errorMessage;
    private EditContext? editContext;
    private InputModel Inputs = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Inputs);       

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // Si el modelo es inválido, mostrar errores en StatusMessage
        if (editContext == null || !editContext!.Validate())
        {
            var messages = editContext?.GetValidationMessages() ?? Enumerable.Empty<string>();
            errorMessage = string.Join("<br>", messages); // 🔥 Unimos todos los mensajes
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // if (result.Succeeded)
        // {
        //     Logger.LogInformation("User logged in.");
        //     RedirectManager.RedirectTo(ReturnUrl);
        // }
        ApplicationUser? user = await UserManager.FindByNameAsync(Input.EmailOrUsername);

        if (user == null)
        {
            user = await UserManager.FindByEmailAsync(Input.EmailOrUsername);
        }

        if (user == null)
        {
            errorMessage = "Usuario no encontrado.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(
            user.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario autenticado.");
            RedirectManager.RedirectTo(ReturnUrl);
        }


        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Credenciales incorrectas";

        }
    }




    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico o nombre de usuario es obligatorio.")]
        public string EmailOrUsername { get; set; } = "";

        // [Required(ErrorMessage = "El correo electrónico es obligatorio.")]
        // [EmailAddress(ErrorMessage = "El correo electrónico no tiene un formato válido.")]
        // public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
